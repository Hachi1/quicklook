#!/usr/bin/env python
# encoding: utf-8
'''
@author:     Radek Hofman
'''

import sys
import os
from optparse import OptionParser

from mods import interactive
from mods import data_tools
from mods import plotters

import config as cf

import warnings
warnings.filterwarnings("ignore")

__all__ = []
__version__ = 0.3   
__date__ = '2014-06-2'
__updated__ = '2014-06-2'

DEBUG = 0
TESTRUN = 0
PROFILE = 0
ERR =  "  [ERROR]"
INFO = "   [INFO]"
WRN =  "[WARNING]"
DOMAINS = ["mother", "nested"]

def explore(headers):
    """
    explores Flexpart output directory
    """
    for i, header in enumerate(headers):
        interactive.print_separator() 
        print "DOMAIN TYPE:", DOMAINS[i] 
        interactive.domain_info_short(header) 

def main(argv=None):
    """
    Command line options
    """
    
    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.2"
    program_build_date = "%s" % __updated__
 
    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Created by Radek Hofman 2014"
            
 
    if argv is None:
        argv = sys.argv[1:]

    
    #try:
    
    if True:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-e", "--explore", dest="exp_path", help="Prints info abou Flexpart output at EXP_PATH") # [default: %default]")
        parser.add_option("-i", "--input", dest="input", help="Flexpart output directory")
        
        parser.add_option("-d", "--domain", type="float", nargs=4, dest="domain", help="Coordinates of the domain: ll_lon, ll_lat, ur_lon, ur_lat")
        parser.add_option("-m", "--max_lat_lon",  action="store_true", dest="max_lat_lon", help="Takes maximum available lat-lon domain (overrides -d)")
        parser.add_option("-l", "--levels", type="float", nargs=2, dest="levels", help="Sets vertical level range for conc/res. times: z0, z1 (z0,z1 >= 0, z0=z1 to select just one level)")
        parser.add_option("-t", "--type", dest="type", help="Flexpart output type [mother|nested]")
        
        parser.add_option("-o", "--output", dest="output", help="Images output directory")
        parser.add_option("-r", "--receptors", dest="receptors", help="File with receptors")
        parser.add_option("-f", "--datafactor", dest="datafactor", help="Factor to multiply the data with")
        parser.add_option("-u", "--unitlabel", dest="unitlabel", help="String containing units of visualized quantity")
        parser.add_option("-n", "--filename", dest="filename", help="Filename of resulting GIF")
        parser.add_option("-q", "--reverse",  action="store_true", dest="reverse", help="Files are processes in reverse order")
        parser.add_option("-x", "--title",  dest="title", help="Title of images")
        parser.add_option("-z", "--projection",  dest="projection", help="Map projection [cylindrical:cyl (default), Marcator:merc]")
        parser.add_option("-s", "--species",  dest="species", help="species to show (default is the first one - 1)")
        parser.add_option("-a", "--agec", type="float", nargs=2, dest="agec", help="Sets range for ageclasses (a1,a2 >= 1, a1=a2 to select just one ageclass). Default: a1=a2=1")
        
        parser.add_option("--conc",  action="store_true", dest="conc", help="Show concentrations/residence times (default)")
        parser.add_option("--drydepo",   action="store_true", dest="drydepo", help="Show dry depo (can be combined with --wetdepo)")
        parser.add_option("--wetdepo",  action="store_true", dest="wetdepo", help="Show wet depo (can be combined with --drydepo)")
        
        #parser.add_option("-v", "--verbose", action="store_false", dest="verbose", help="set verbose mode", default=True)
        
        # process options
        (opts, args) = parser.parse_args(argv)
        
        
        if opts.exp_path:
            #explores Flexpart output and quits
            grids, headers = data_tools.load_data(opts.exp_path)
            explore(headers) 
            sys.exit(2)
        
        
        data_type = 0 #default: conc/resident times = 0
        
        if opts.drydepo:
            data_type = 1 #dry depo
            print INFO+" - Dry depositon will be shown."
        if opts.wetdepo:
            data_type = 2 #wet depo
            print INFO+" - Wet deposition will be shown."
        if opts.drydepo and opts.wetdepo:
            data_type = 3 #sum of all deposition
            print INFO+" - Sum of dry and wet deposition will be shown."
            
        
        
        if opts.reverse:
            print INFO+" - Files will be processed reversely"
            reverse = True
        else:
            reverse = False            

        if opts.species:
            species = int(opts.species)
            if species < 1:
               print ERR+" - Species identificator must be >= 1" 
               sys.exit(2)
        else:
            species = 1 #default species    
            print WRN+" - Species not specified, taking default values -s 1"        
             
        
        if opts.input:
            try:
                grids, headers = data_tools.load_data(opts.input, species, reverse)
            except:
                print ERR+" - Can not open FLEXPART output data!"
                sys.exit(2)
        else:
            print ERR+" - Flexpart output directory not set, please run '%s -h'" % (program_name)
            sys.exit(2)

        if opts.type in DOMAINS:
            if len(headers) > DOMAINS.index(opts.type)+1:
                print ERR+" - Domain %s not available!" % opts.type 

        else:
            print ERR+" - Output domain (-t mother|nested) not set, please run '%s -h'" % (program_name)     
            explore(headers)
            sys.exit(2)  
        
  
        species_name = "".join([x for x in headers[DOMAINS.index(opts.type)]["species"][species-1][0]]) 
        print INFO+" - Species: "+str(species)+" "+species_name   
        

        
        try:
            headers[DOMAINS.index(opts.type)]
        except:
            print ERR+" - Domain '%s' not available!" % opts.type
            sys.exit(2)
        
        if opts.max_lat_lon:
            max_d = interactive.get_max_domain(headers[DOMAINS.index(opts.type)])
            opts.domain = max_d
            print INFO+" - Taking maximum available domain:", max_d
        
        
        #validation of domain
        if opts.domain:
            lon0 = opts.domain[0]
            lat0 = opts.domain[1]
            lon1 = opts.domain[2]
            lat1 = opts.domain[3]
            valid = interactive.validate_domain(lon0, lat0, lon1, lat1, headers[DOMAINS.index(opts.type)])  
            if not valid:
                print ERR+" - Domain not valid!"
                sys.exit(2)
        else:
            print ERR+" - Domain or not specified, please run '%s -h'" % (program_name)
            explore(headers)
            sys.exit(2)
   
        #validation of levels when concentration/res. times are plotted
        z0, z1 = 0, 0
        if data_type==0:
            if opts.levels:
                z0 = opts.levels[0]
                z1 = opts.levels[1]
                valid = interactive.validate_levels(z0, z1)  
                if not valid:
                    print ERR+" - Levels not valid!"
                    sys.exit(2)
            else:
                print WRN+" - Levels not specified, taking default values -l 0 0"
                   
                
            
        if opts.receptors:
            receptors = data_tools.laod_receptors(opts.receptors)
            print INFO+" - Receptor loaded!"
        else:
            receptors = []
            
        if opts.datafactor:
            data_factor = opts.datafactor
        else: 
            data_factor = 1.0
            
        if opts.output:
            output = opts.output
        else:
            output = opts.input
            print INFO+" - No output path provided, results will be saved to %s" % output 
         
        if opts.filename:
            filename = opts.filename
        else:
            filename = "anim_%s%s.gif" % (opts.type, cf.FILE_NAMES[data_type])
            print INFO+" - No filename provided, setting to %s" % filename
            

        if opts.unitlabel:
            unitlabel = opts.unitlabel
        else: 
            unitlabel = ""
        
        """   
        if opts.animation:             
            print "- Animation will be created"
            animation = opts.animation
        else:
            print "- Animation will NOT be created"
            animation = False    
        """
        
        if opts.title:
            title = opts.title
        else:
            title = ""
        
        if opts.projection:
            projection = opts.projection
        else:
            projection = "cyl"
        
        projs = {"cyl": "cylindrical", "merc": "Mercator"}     
        if not projection in projs.keys():
            print ERR+" - Projection type '%s' not supported" % projection
            sys.exit(1)
        print INFO+" - %s projection will be used" % projs[projection]            
        
                   
        if opts.agec:
            a1=int(opts.agec[0])
            a2=int(opts.agec[1])
            if a2<a1:
                print ERR+" - Wrong age class range!"
                sys.exit(1)
            else:
                print INFO+" - Using age class range %d - %d" % (a1, a2)
        else:
            a1, a2 = 1, 1
            print INFO+" - Setting default age class range %d - %d" % (a1, a2)
        
            
        plotters.make_animation(headers[DOMAINS.index(opts.type)], 
                            grids[DOMAINS.index(opts.type)],
                            opts.type,
                            data_factor, 
                            opts.input, 
                            lon0, 
                            lon1, 
                            lat0, 
                            lat1, 
                            z0,z1, 
                            output,
                            receptors,
                            filename,
                            unitlabel,
                            title,
                            projection,
                            data_type,
                            a1,a2)
            
        # MAIN BODY #
    """     
    except Exception, e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2
    """

if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'src.r_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    
    
    main()